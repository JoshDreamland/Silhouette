<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<object>
  <spriteName>spr_2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <maskName>&lt;undefined&gt;</maskName>
  <parentName>&lt;undefined&gt;</parentName>
  <events>
    <event enumb="0" eventtype="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>local double lfoot_x = x - 8;&#13;
local double lfoot_y = y;&#13;
local double rfoot_x = x + 8;&#13;
local double rfoot_y = y;&#13;
&#13;
local double lhand_x = x - 4;&#13;
local double lhand_y = y - 20;&#13;
local double rhand_x = x + 4;&#13;
local double rhand_y = y - 20;&#13;
&#13;
local double lfoot_lastx = lfoot_x;&#13;
local double lfoot_lasty = lfoot_y;&#13;
local double rfoot_lastx = rfoot_x;&#13;
local double rfoot_lasty = rfoot_y;&#13;
&#13;
local double foot_phase = 0;&#13;
local int facing_dir = 1;&#13;
&#13;
local int which_foot;&#13;
local int LEFT_FOOT = 1;&#13;
local int RIGHT_FOOT = 2;&#13;
&#13;
local int extra_cycles = 0;&#13;
&#13;
local double lknee_x = x - 8;&#13;
local double lknee_y = y - 12;&#13;
local double rknee_x = x + 8;&#13;
local double rknee_y = y - 12;&#13;
&#13;
local double torso_elevation = 24;&#13;
local double torso_height = 16;&#13;
local double leg_length = 12;&#13;
&#13;
local double pelvis_y = y - torso_elevation;&#13;
&#13;
local bool onground = false;&#13;
local bool was_onground = false;&#13;
&#13;
local bool teleporting = false;&#13;
local bool can_teleport = true;&#13;
local int teleport_time = 0;&#13;
&#13;
local var part_x;&#13;
local var part_y;&#13;
local var part_r;&#13;
local var part_p;&#13;
local int num_parts = 32;&#13;
for (int i = 0; i &lt; num_parts; ++i) {&#13;
  part_a[i] = false;&#13;
  part_p[i] = random(pi);&#13;
}&#13;
&#13;
local int respawn = 0;&#13;
health = 100;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="2" eventtype="3">
      <action>
        <libid>1</libid>
        <id>722</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <useapplyto>0</useapplyto>
        <isquestion>-1</isquestion>
        <exetype>1</exetype>
        <functionname>action_if_health</functionname>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <useapplyto>0</useapplyto>
        <isquestion>0</isquestion>
        <exetype>0</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments/>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>-1</isquestion>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>teleporting</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravity = .75;&#13;
&#13;
double target = trace_ray(x);&#13;
double ptarget = trace_ray(xprevious);&#13;
if (y &lt; target - 8) {&#13;
  if (y &gt; room_height + 640) {&#13;
    health = 0;&#13;
    instance_create(x, y, obj_kersplode);&#13;
  }&#13;
  onground = false;&#13;
} else {&#13;
  if (x != xprevious) {&#13;
    double slope = (ptarget - target) / abs(x - xprevious);&#13;
    if (slope &gt;= 2) {&#13;
      x = xprevious;&#13;
      hspeed = 0;&#13;
      target = ptarget;&#13;
    } else if (slope &gt; 0) {&#13;
      double hsmax = 4 / (slope + 1);&#13;
      if (hspeed &gt; hsmax) {&#13;
        hspeed = hsmax;&#13;
      } else if (hspeed &lt; -hsmax) {&#13;
        hspeed = -hsmax;&#13;
      }&#13;
    }&#13;
  }&#13;
  if (vspeed &gt; 0) {&#13;
    y = target;&#13;
    vspeed = 0;&#13;
  }&#13;
  onground = true;&#13;
}&#13;
&#13;
if (hspeed &gt; 0) {&#13;
  double starget = trace_ray(x + 12);&#13;
  if (starget &lt; y - 24) {&#13;
    hspeed = 0;&#13;
  }&#13;
} else if (hspeed &lt; 0) {&#13;
  double starget = trace_ray(x - 12);&#13;
  if (starget &lt; y - 24) {&#13;
    hspeed = 0;&#13;
  }&#13;
}</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <useapplyto>0</useapplyto>
        <isquestion>0</isquestion>
        <exetype>0</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments/>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravity = 0;</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>double crouch_factor = abs(hspeed) / 8.0;&#13;
double foot_x, foot_y, knee_x, knee_y, dx;&#13;
&#13;
pelvis_y = y - torso_elevation + 10*crouch_factor;&#13;
&#13;
if (!onground || !was_onground) {&#13;
  was_onground = onground;&#13;
  lfoot_x += x - xprevious - .25;&#13;
  lfoot_y += y - yprevious;&#13;
  rfoot_x += x - xprevious + .25;&#13;
  rfoot_y += y - yprevious;&#13;
  if (rfoot_x &lt; x + leg_length / 2) {&#13;
    rfoot_x += 1;&#13;
  }&#13;
  if (lfoot_x &gt; x - leg_length / 4) {&#13;
    lfoot_x -= 1;&#13;
  }&#13;
  if ((facing_dir &gt; 0? rfoot_y : lfoot_y) &gt; pelvis_y + 8) {&#13;
    (facing_dir &gt; 0? rfoot_y : lfoot_y) -= 1;&#13;
  } else {&#13;
    (facing_dir &gt; 0? rfoot_y : lfoot_y) = pelvis_y + 8;&#13;
  }&#13;
  if (facing_dir &gt; 0? rfoot_x &lt; x + 3 : lfoot_x &gt; x - 3) {&#13;
    facing_dir &gt; 0? (rfoot_x = x + 3) : (lfoot_x = x - 3);&#13;
  }&#13;
  foot_phase = 0;&#13;
  which_foot = facing_dir &gt; 0? RIGHT_FOOT : LEFT_FOOT;&#13;
  lfoot_lastx = lfoot_x;&#13;
  lfoot_lasty = lfoot_y;&#13;
  rfoot_lastx = rfoot_x;&#13;
  rfoot_lasty = rfoot_y;&#13;
} else if (which_foot) {&#13;
  if (which_foot == LEFT_FOOT) {&#13;
    foot_x = lfoot_lastx;&#13;
    foot_y = lfoot_lasty;&#13;
    dx = -8;&#13;
  } else {&#13;
    foot_x = rfoot_lastx ;&#13;
    foot_y = rfoot_lasty ;&#13;
    dx = 8;&#13;
  }&#13;
  &#13;
  foot_x = lerp(foot_x, x + hspeed + dx, sin(foot_phase / 2));&#13;
  foot_y = lerp(foot_y, y + vspeed,      sin(foot_phase / 2)) - 7*crouch_factor*sin(foot_phase);&#13;
  &#13;
  if (which_foot == LEFT_FOOT) {&#13;
    lfoot_x = foot_x;&#13;
    lfoot_y = foot_y;&#13;
  } else {&#13;
    rfoot_x = foot_x;&#13;
    rfoot_y = foot_y;&#13;
  }&#13;
  &#13;
  if (foot_phase &lt; pi) {&#13;
    foot_phase += pi / 5;&#13;
    if (foot_phase &gt; pi) {&#13;
      foot_phase = pi;&#13;
    }&#13;
  } else {&#13;
    if (which_foot == RIGHT_FOOT) {&#13;
      which_foot = LEFT_FOOT;&#13;
      rfoot_lastx = foot_x;&#13;
      rfoot_lasty = foot_y;&#13;
    } else {&#13;
      which_foot = RIGHT_FOOT;&#13;
      lfoot_lastx = foot_x;&#13;
      lfoot_lasty = foot_y;&#13;
    }&#13;
    foot_phase = 0;&#13;
    if (abs(hspeed) &lt; .01) {&#13;
      if (extra_cycles &lt;= 0) {&#13;
      	which_foot = 0;&#13;
      } else {&#13;
        //--extra_cycles;&#13;
      }&#13;
    }&#13;
  }&#13;
}&#13;
if (abs(hspeed) &gt; .01) {&#13;
  if (!which_foot) {&#13;
    which_foot = RIGHT_FOOT;&#13;
  }&#13;
  extra_cycles = 1;&#13;
}&#13;
&#13;
foot_x = lfoot_x;&#13;
foot_y = lfoot_y;&#13;
bool doneloop = false;&#13;
int face_angle = facing_dir &gt; 0? 90 : -90;&#13;
&#13;
repeat (2) {&#13;
  double fdir = point_direction(x, pelvis_y, foot_x, foot_y);&#13;
  double fdist = point_distance(x, pelvis_y, foot_x, foot_y);&#13;
  if (fdist &gt; leg_length * 2) {&#13;
    foot_x = x + lengthdir_x(leg_length * 2, fdir);&#13;
    foot_y = pelvis_y + lengthdir_y(leg_length * 2, fdir);&#13;
    knee_x = (foot_x + x) / 2;&#13;
    knee_y = (foot_y + pelvis_y) / 2;&#13;
  } else {&#13;
    double apoth = sqrt(leg_length * leg_length - fdist * fdist / 4);&#13;
    knee_x = (foot_x + x) / 2 + lengthdir_x(apoth, fdir + face_angle);&#13;
    knee_y = (foot_y + pelvis_y) / 2 + lengthdir_y(apoth, fdir + face_angle);&#13;
  }&#13;
  &#13;
  if (!doneloop) {&#13;
    lfoot_x = foot_x;&#13;
    lfoot_y = foot_y;&#13;
    lknee_x = knee_x;&#13;
    lknee_y = knee_y;&#13;
    &#13;
    foot_x = rfoot_x;&#13;
    foot_y = rfoot_y;&#13;
    doneloop = true;&#13;
  } else {&#13;
    rfoot_x = foot_x;&#13;
    rfoot_y = foot_y;&#13;
    rknee_x = knee_x;&#13;
    rknee_y = knee_y;&#13;
  }&#13;
}</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <useapplyto>0</useapplyto>
        <isquestion>0</isquestion>
        <exetype>0</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments/>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <useapplyto>0</useapplyto>
        <isquestion>0</isquestion>
        <exetype>0</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments/>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = xprevious;&#13;
y = yprevious;</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &gt; room_width + 32 &amp;&amp; room_exists(room_next(room))) {&#13;
  x -= room_width;&#13;
  room_goto_next();&#13;
}&#13;
if (x &lt; 0 or x &lt; global.room_leftbound) {&#13;
  x = max(0, global.room_leftbound);&#13;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="3">
      <action>
        <libid>1</libid>
        <id>722</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <useapplyto>0</useapplyto>
        <isquestion>-1</isquestion>
        <exetype>1</exetype>
        <functionname>action_if_health</functionname>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>-1</isquestion>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>teleporting</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>int input_dir = (keyboard_check(vk_right) or keyboard_check(ord('D'))) - (keyboard_check(vk_left) or keyboard_check(ord('A')));&#13;
if (input_dir) {&#13;
  facing_dir = input_dir;&#13;
}&#13;
input_dir &lt;&lt;= 2;&#13;
if (input_dir &gt; hspeed) {&#13;
  hspeed += .25;&#13;
  if (hspeed &gt; input_dir) {&#13;
    hspeed = input_dir;&#13;
  }&#13;
} else if (input_dir &lt; hspeed) {&#13;
  hspeed -= .25;&#13;
  if (hspeed &lt; input_dir) {&#13;
    hspeed = input_dir;&#13;
  }&#13;
}&#13;
&#13;
bool jmpkey = keyboard_check_pressed(vk_up) or keyboard_check_pressed(ord('Z')) or keyboard_check_pressed(vk_space);&#13;
if (onground) {&#13;
  if (jmpkey) {&#13;
    vspeed = -12;&#13;
  }&#13;
  can_teleport = true;&#13;
} else if (jmpkey &amp;&amp; (can_teleport || teleport_time &gt; 0)) {&#13;
  teleporting = true;&#13;
  if (can_teleport) {&#13;
    teleport_time = 60 * 2;&#13;
    can_teleport = false;&#13;
  }&#13;
}</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <useapplyto>0</useapplyto>
        <isquestion>0</isquestion>
        <exetype>0</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments/>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>int input_dirX = (keyboard_check(vk_right) + keyboard_check(ord('D'))) - (keyboard_check(vk_left) + keyboard_check(ord('A')));&#13;
int input_dirY = (keyboard_check(vk_down) + keyboard_check(ord('S'))) - (keyboard_check(vk_up) + keyboard_check(ord('W')));&#13;
&#13;
if (input_dirX != 0 || input_dirY != 0) {&#13;
  double dir = point_direction(0, 0, input_dirX, input_dirY);&#13;
  motion_add(dir, 3);&#13;
  speed = clamp(speed + .1, 0, 12);&#13;
} else {&#13;
  speed *= .99;&#13;
  if (speed &lt; .1) {&#13;
    speed = 0;&#13;
  }&#13;
}&#13;
&#13;
if (--teleport_time &lt; 0) {&#13;
  teleport_time = 0;&#13;
  teleporting = false;&#13;
}</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <useapplyto>0</useapplyto>
        <isquestion>0</isquestion>
        <exetype>0</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments/>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gravity = 0;&#13;
hspeed = 0;&#13;
vspeed = 0;&#13;
if (respawn == 0) {&#13;
  int w;&#13;
  w = instance_create(x, y, obj_wave);&#13;
  w.trail_r = 48;&#13;
  w.rs = 24;&#13;
  w = instance_create(x, y, obj_wave);&#13;
  w.trail_r = 32;&#13;
  w.rs = 20;&#13;
  w = instance_create(x, y, obj_wave);&#13;
  w.trail_r = 24;&#13;
  w.rs = 16;&#13;
}&#13;
if (++respawn &gt; 60) {&#13;
  if (respawn == 64) {&#13;
    double pelvis_x = x;&#13;
    double collar_y = pelvis_y - torso_height;&#13;
    double granularity = 2;&#13;
    instance_paint_line(lfoot_x, lfoot_y, lknee_x, lknee_y,     granularity, obj_playervapor);&#13;
    instance_paint_line(rfoot_x, rfoot_y, rknee_x, rknee_y,     granularity, obj_playervapor);&#13;
    instance_paint_line(lknee_x, lknee_y, pelvis_x, pelvis_y,   granularity, obj_playervapor);&#13;
    instance_paint_line(rknee_x, rknee_y, pelvis_x, pelvis_y,   granularity, obj_playervapor);&#13;
    instance_paint_line(pelvis_x, pelvis_y, pelvis_x, collar_y, granularity, obj_playervapor);&#13;
    instance_paint_circle(pelvis_x, collar_y - 13, 11, 3, obj_playervapor);&#13;
  } else if(respawn == 80) {&#13;
    visible = false;&#13;
  } else if(respawn &gt; 300) {&#13;
    respawn = 0;&#13;
    health = 100;&#13;
    room_restart();&#13;
  }&#13;
}&#13;
room_caption = "speed: " + string(hspeed) + ", " + string(vspeed);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_player_head(x, pelvis_y - torso_height + 2, 0, facing_dir);&#13;
&#13;
draw_line_width(lfoot_x, lfoot_y, lknee_x, lknee_y, 7);&#13;
draw_line_width(lknee_x, lknee_y, x - 2, pelvis_y, 7);&#13;
draw_circle(lknee_x, lknee_y, 3.5, 0);&#13;
&#13;
draw_line_width(rfoot_x, rfoot_y, rknee_x, rknee_y, 7);&#13;
draw_line_width(rknee_x, rknee_y, x + 2, pelvis_y, 7);&#13;
draw_circle(rknee_x, rknee_y, 3.5, 0);&#13;
&#13;
draw_circle(x - 2, pelvis_y, 3.5, 0);&#13;
draw_circle(x + 2, pelvis_y, 3.5, 0);&#13;
&#13;
double collar_y = pelvis_y - torso_height;&#13;
draw_line_width(x , pelvis_y, x, collar_y, 7);&#13;
draw_line_width(x , pelvis_y, x, collar_y, 7);&#13;
&#13;
for (int i = 0; i &lt; num_parts; ++i) {&#13;
  if (part_a[i]) {&#13;
    draw_circle(part_x[i], part_y[i], 5 * sin(part_p[i]), 0);&#13;
  }&#13;
  part_p[i] -= pi / 12;&#13;
  if (part_p[i] &lt; 0) {&#13;
    part_a[i] = teleporting;&#13;
    part_x[i] = x + random(48) - 24 + hspeed;&#13;
    part_y[i] = y + 12 - random(64) + vspeed;&#13;
    part_p[i] = pi;&#13;
  }&#13;
}&#13;
&#13;
draw_set_color(c_white);&#13;
int hx = lrint(view_xview[0]), hy = lrint(view_yview[0] + view_hview[0]);&#13;
draw_healthbar(hx + 16, hy - 24, hx + 128, hy - 12, health, c_black, 128, c_white, 0, 1, 0);&#13;
draw_rectangle(hx + 12, hy - 28, hx + 132, hy - 8, true);&#13;
draw_set_color(c_black);&#13;
&#13;
// room_caption = "Silhouette (" + string(fps) + "/60 fps)";</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
