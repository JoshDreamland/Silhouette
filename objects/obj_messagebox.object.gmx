<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <maskName>&lt;undefined&gt;</maskName>
  <parentName>&lt;undefined&gt;</parentName>
  <events>
    <event enumb="0" eventtype="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>local variant message = "[No message (ENGLISH)]";&#13;
local int transition_time = 12;&#13;
local double transition_speed = 3;&#13;
local int text_delay = 3;&#13;
local int cur_delay = 0;&#13;
local int display_time = 120;&#13;
&#13;
local int visible_chars = 0;&#13;
local int decaying_char = 0;&#13;
local bool was_complete = false;&#13;
local bool is_decaying = false;&#13;
&#13;
local var char_displacement;&#13;
local var char_alpha;&#13;
&#13;
local bool active = false;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!active) {&#13;
  if (obj_player.x &gt; x) {&#13;
    active = true;&#13;
  } else {&#13;
    return 0;&#13;
  }&#13;
}&#13;
if (!was_complete) {&#13;
  if (--cur_delay &lt; 0) {&#13;
    cur_delay = text_delay;&#13;
    if (visible_chars &lt; string_length(message)) {&#13;
      char_alpha[visible_chars] = 0;&#13;
      char_displacement[visible_chars] = transition_time * transition_speed;&#13;
      ++visible_chars;&#13;
    } else {&#13;
      visible_chars = string_length(message);&#13;
      was_complete = true;&#13;
    }&#13;
  }&#13;
  for (int i = 0; i &lt; visible_chars; ++i) {&#13;
    if (char_displacement[i] &lt;= 0) {&#13;
      char_displacement[i] = 0;&#13;
      char_alpha[visible_chars] = 1;&#13;
    } else {&#13;
      char_displacement[i] -= transition_speed;&#13;
      char_alpha[i] = 1 - char_displacement[i] / transition_time;&#13;
      was_complete = false;&#13;
    }&#13;
  }&#13;
} else if (!is_decaying) {&#13;
  if (--display_time &lt; 0) {&#13;
    is_decaying = true;&#13;
  }&#13;
} else {&#13;
  char_alpha[decaying_char] -= .05;&#13;
  char_displacement[decaying_char] -= 1;&#13;
  bool still_visible = true;&#13;
  if (--cur_delay &lt; 0) {&#13;
    cur_delay = text_delay;&#13;
    if (decaying_char &lt; visible_chars) {&#13;
      ++decaying_char;&#13;
    } else {&#13;
      still_visible = false;&#13;
    }&#13;
  }&#13;
  for (int i = 0; i &lt; decaying_char; ++i) {&#13;
    if (char_alpha[decaying_char] &lt;= 0) {&#13;
      char_alpha[decaying_char] = 0;&#13;
    } else if (char_alpha[i] &gt; 0) {&#13;
      char_displacement[i] -= transition_speed;&#13;
      char_alpha[i] = 1 + char_displacement[i] / transition_time;&#13;
      if (char_alpha[i] &lt;= 0) {&#13;
        char_alpha[i] = 0;&#13;
      } else {&#13;
        still_visible = true;&#13;
      }&#13;
    }&#13;
  }&#13;
  if (!still_visible) {&#13;
    instance_destroy();&#13;
  }&#13;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event enumb="0" eventtype="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <useapplyto>-1</useapplyto>
        <isquestion>0</isquestion>
        <exetype>2</exetype>
        <functionname/>
        <codestring/>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>double dx = x;&#13;
draw_set_font(font_0);&#13;
for (int i = 0; i &lt; visible_chars; ++i) {&#13;
  draw_set_color(c_white);&#13;
  draw_set_alpha(char_alpha[i]);&#13;
  variant ch = string_char_at(message, i + 1);&#13;
  draw_text(dx + char_displacement[i], y, ch);&#13;
  dx += ch == " "? 10 : string_width(ch);&#13;
}&#13;
draw_set_color(c_black);&#13;
draw_set_alpha(1);</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
